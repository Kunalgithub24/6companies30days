//Java code 
import java.util.HashMap;

class Solution {
    public long maximumSubarraySum(int[] nums, int k) {
        int n = nums.length;
        long maxSum = 0;
        long winSum = 0;
        HashMap<Integer, Integer> freq = new HashMap<>();

        for (int i = 0; i < n; ++i) {
            // Step-1: Include right element
            freq.put(nums[i], freq.getOrDefault(nums[i], 0) + 1);
            winSum += nums[i];

            // Step-2: Exclude left element
            if (i >= k) {
                winSum -= nums[i - k];
                freq.put(nums[i - k], freq.get(nums[i - k]) - 1);
                if (freq.get(nums[i - k]) == 0) {
                    freq.remove(nums[i - k]);
                }
            }

            // Step-3: Maximize maxSum
            if (i >= k - 1 && freq.size() == k) {
                maxSum = Math.max(maxSum, winSum);
            }
        }
        return maxSum;
    }
}

// also the lastest one..

import java.util.HashSet;
import java.util.Set;

class Solution {
    public long maximumSubarraySum(int[] nums, int k) {
        long maxSum = 0;
        long currentSum = 0;
        int n = nums.length;
        Set<Integer> windowSet = new HashSet<>();

        int left = 0;

        for (int right = 0; right < n; right++) {
            int currNum = nums[right];

            // Slide window if duplicate is found or size exceeds k
            while (windowSet.contains(currNum) || (right - left + 1) > k) {
                windowSet.remove(nums[left]);
                currentSum -= nums[left];
                left++;
            }

            // Add current element to the window
            windowSet.add(currNum);
            currentSum += currNum;

            // Update maxSum if a valid subarray of size k is found
            if (right - left + 1 == k) {
                maxSum = Math.max(maxSum, currentSum);
            }
        }

        return maxSum;
    }
}
